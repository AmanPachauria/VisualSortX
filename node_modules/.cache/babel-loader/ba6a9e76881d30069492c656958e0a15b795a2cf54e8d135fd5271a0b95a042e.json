{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  HeapSortHelper(array, array.length, animations);\n  return animations;\n}\nfunction HeapSortHelper(mainarray, n, animations) {\n  //  1) max_heapify the array \n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    MaxHeapify(mainarray, n, i, animations);\n  }\n  for (let i = n - 1; i >= 0; i--) {\n    // animations.push([0, i, 0]);\n    animations.push([0, mainarray[i], 2]);\n    animations.push([i, mainarray[0], 2]);\n    animations.push([0, i, 4]);\n    swap(mainarray, 0, i);\n    animations.push([i, i, 3]);\n    MaxHeapify(mainarray, i, 0, animations);\n    animations.push([i, i, 1]);\n  }\n}\n_c = HeapSortHelper;\nfunction MaxHeapify(mainArray, n, i, animations) {\n  let larger = i;\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n  if (left < n && mainArray[larger] < mainArray[left]) {\n    animations.push([larger, left, 0]);\n    larger = left;\n  }\n  if (right < n && mainArray[larger] < mainArray[right]) {\n    if (larger !== i) {\n      animations.push([larger, larger, 4]);\n    }\n    animations.push([i, right, 0]);\n    // animations.push([larger, right, 4]);\n    larger = right;\n  }\n  if (larger !== i) {\n    animations.push([larger, mainArray[i], 2]);\n    animations.push([i, mainArray[larger], 2]);\n    animations.push([larger, i, 4]);\n    swap(mainArray, larger, i);\n    MaxHeapify(mainArray, n, larger, animations);\n  }\n\n  // animations.push([larger, i, 3]);\n}\n_c2 = MaxHeapify;\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"HeapSortHelper\");\n$RefreshReg$(_c2, \"MaxHeapify\");","map":{"version":3,"names":["getHeapSortAnimations","array","animations","length","HeapSortHelper","mainarray","n","i","Math","floor","MaxHeapify","push","swap","_c","mainArray","larger","left","right","_c2","arr","j","temp","$RefreshReg$"],"sources":["/home/aman/Documents/Projects/new/visualsortx/src/sortingAlgorithms/HeapSort.js"],"sourcesContent":["export function getHeapSortAnimations(array) {\n\n    // //Setting Time complexities\n    // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n    // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n    // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n    // //Setting Space complexity\n    // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n\n        // animations.push([0, i, 0]);\n        animations.push([0, mainarray[i], 2]);\n        animations.push([i, mainarray[0], 2]);\n        animations.push([0, i, 4]);\n        swap(mainarray, 0, i);\n        animations.push([i, i, 3]);\n        MaxHeapify(mainarray, i, 0, animations);\n        animations.push([i, i, 1]);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        animations.push([larger, left, 0]);\n        larger = left;\n    }\n\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        if (larger !== i) {\n            animations.push([larger, larger, 4]);\n        }\n        animations.push([i, right, 0]);\n        // animations.push([larger, right, 4]);\n        larger = right;\n    }\n\n    if (larger !== i) {\n\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        animations.push([larger, i, 4]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n\n    }\n\n    // animations.push([larger, i, 3]);\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}