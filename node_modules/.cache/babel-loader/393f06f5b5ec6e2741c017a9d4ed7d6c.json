{"ast":null,"code":"export function getBubbleSortAnimations(array) {\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n  const animations = [];\n  if (array.length <= 1) return array; // const auxiliaryArray = array.slice();\n\n  quickSortHelper(array, animations);\n  return animations;\n}\n\nfunction quickSortHelper(mainArray, animations) {\n  for (let i = 1; i < mainArray.length; i++) {\n    let isSort = true;\n\n    for (let j = 0; j < mainArray.length - i; j++) {\n      animations.push([j, j + 1, 0]);\n      animations.push([j, j + 1, 1]);\n\n      if (mainArray[j] > mainArray[j + 1]) {\n        animations.push([j, mainArray[j + 1], 2]);\n        animations.push([j + 1, mainArray[j], 2]);\n        swap(mainArray, j, j + 1);\n        isSort = false;\n      }\n    }\n\n    animations.push([mainArray.length - i, mainArray.length - i, 3]);\n    if (isSort) break;\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/BubbleSort.js"],"names":["getBubbleSortAnimations","array","animations","length","quickSortHelper","mainArray","i","isSort","j","push","swap","arr","temp"],"mappings":"AAAA,OAAO,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AAG7C;AACA;AACA;AACA;AAEA;AACA;AAEA,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP,CAZsB,CAa7C;;AACAG,EAAAA,eAAe,CAACH,KAAD,EAAQC,UAAR,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASE,eAAT,CACEC,SADF,EAEEH,UAFF,EAGE;AAEA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACF,MAA9B,EAAsCG,CAAC,EAAvC,EAA2C;AACzC,QAAIC,MAAM,GAAG,IAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACF,MAAV,GAAmBG,CAAvC,EAA0CE,CAAC,EAA3C,EAA+C;AAC7CN,MAAAA,UAAU,CAACO,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,EAAW,CAAX,CAAhB;AACAN,MAAAA,UAAU,CAACO,IAAX,CAAgB,CAACD,CAAD,EAAIA,CAAC,GAAG,CAAR,EAAW,CAAX,CAAhB;;AAEA,UAAIH,SAAS,CAACG,CAAD,CAAT,GAAeH,SAAS,CAACG,CAAC,GAAG,CAAL,CAA5B,EAAqC;AACnCN,QAAAA,UAAU,CAACO,IAAX,CAAgB,CAACD,CAAD,EAAIH,SAAS,CAACG,CAAC,GAAG,CAAL,CAAb,EAAsB,CAAtB,CAAhB;AACAN,QAAAA,UAAU,CAACO,IAAX,CAAgB,CAACD,CAAC,GAAG,CAAL,EAAQH,SAAS,CAACG,CAAD,CAAjB,EAAsB,CAAtB,CAAhB;AACAE,QAAAA,IAAI,CAACL,SAAD,EAAYG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,CAAJ;AACAD,QAAAA,MAAM,GAAG,KAAT;AACD;AACF;;AAEDL,IAAAA,UAAU,CAACO,IAAX,CAAgB,CAACJ,SAAS,CAACF,MAAV,GAAmBG,CAApB,EAAuBD,SAAS,CAACF,MAAV,GAAmBG,CAA1C,EAA6C,CAA7C,CAAhB;AAGA,QAAIC,MAAJ,EAAY;AACb;AACF;;AAED,SAASG,IAAT,CAAcC,GAAd,EAAmBL,CAAnB,EAAsBE,CAAtB,EAAyB;AACvB,QAAMI,IAAI,GAAGD,GAAG,CAACL,CAAD,CAAhB;AACAK,EAAAA,GAAG,CAACL,CAAD,CAAH,GAASK,GAAG,CAACH,CAAD,CAAZ;AACAG,EAAAA,GAAG,CAACH,CAAD,CAAH,GAASI,IAAT;AACD","sourcesContent":["export function getBubbleSortAnimations(array) {\n\n\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  // const auxiliaryArray = array.slice();\n  quickSortHelper(array, animations);\n  return animations;\n}\n\nfunction quickSortHelper(\n  mainArray,\n  animations,\n) {\n\n  for (let i = 1; i < mainArray.length; i++) {\n    let isSort = true;\n    for (let j = 0; j < mainArray.length - i; j++) {\n      animations.push([j, j + 1, 0]);\n      animations.push([j, j + 1, 1]);\n\n      if (mainArray[j] > mainArray[j + 1]) {\n        animations.push([j, mainArray[j + 1], 2]);\n        animations.push([j + 1, mainArray[j], 2]);\n        swap(mainArray, j, j + 1);\n        isSort = false;\n      }\n    }\n\n    animations.push([mainArray.length - i, mainArray.length - i, 3]);\n\n\n    if (isSort) break;\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n\n\n"]},"metadata":{},"sourceType":"module"}