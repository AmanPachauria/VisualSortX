{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j, 1]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i, 1]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j, 1]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n} // export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     if (mainArray[i] <= mainArray[j]) {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/MergeSort.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","push","doMerge","k","i","j"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvB,QAAMG,cAAc,GAAGH,KAAK,CAACI,KAAN,EAAvB;AACAC,EAAAA,eAAe,CAACL,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BC,cAA7B,EAA6CF,UAA7C,CAAf;AACA,SAAOA,UAAP;AACD;;AAED,SAASI,eAAT,CACEC,SADF,EAEEC,QAFF,EAGEC,MAHF,EAIEL,cAJF,EAKEF,UALF,EAME;AACA,MAAIM,QAAQ,KAAKC,MAAjB,EAAyB;AACzB,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACJ,QAAQ,GAAGC,MAAZ,IAAsB,CAAjC,CAAlB;AACAP,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,SAAD,EAAYA,SAAZ,EAAuB,CAAvB,CAAhB;AACAJ,EAAAA,eAAe,CAACF,cAAD,EAAiBI,QAAjB,EAA2BE,SAA3B,EAAsCH,SAAtC,EAAiDL,UAAjD,CAAf;AACAI,EAAAA,eAAe,CAACF,cAAD,EAAiBM,SAAS,GAAG,CAA7B,EAAgCD,MAAhC,EAAwCF,SAAxC,EAAmDL,UAAnD,CAAf;AACAY,EAAAA,OAAO,CAACP,SAAD,EAAYC,QAAZ,EAAsBE,SAAtB,EAAiCD,MAAjC,EAAyCL,cAAzC,EAAyDF,UAAzD,CAAP;AACD;;AAED,SAASY,OAAT,CACEP,SADF,EAEEC,QAFF,EAGEE,SAHF,EAIED,MAJF,EAKEL,cALF,EAMEF,UANF,EAOE;AACA,MAAIa,CAAC,GAAGP,QAAR;AACA,MAAIQ,CAAC,GAAGR,QAAR;AACA,MAAIS,CAAC,GAAGP,SAAS,GAAG,CAApB;;AACA,SAAOM,CAAC,IAAIN,SAAL,IAAkBO,CAAC,IAAIR,MAA9B,EAAsC;AAEpC;AACA;AACAP,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACG,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAAhB,EAJoC,CAMpC;AACA;;AACAf,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACG,CAAD,EAAIC,CAAJ,EAAO,CAAP,CAAhB;;AAEA,QAAIb,cAAc,CAACY,CAAD,CAAd,IAAqBZ,cAAc,CAACa,CAAD,CAAvC,EAA4C;AAC1C;AACA;AACAf,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAACE,CAAD,EAAIX,cAAc,CAACY,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAT,MAAAA,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBX,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD,KALD,MAKO;AACL;AACA;AACAd,MAAAA,UAAU,CAACW,IAAX,CAAgB,CAACE,CAAD,EAAIX,cAAc,CAACa,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAV,MAAAA,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBX,cAAc,CAACa,CAAC,EAAF,CAA/B;AACD;AACF;;AACD,SAAOD,CAAC,IAAIN,SAAZ,EAAuB;AACrB;AACA;AACAR,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACG,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAAhB,EAHqB,CAIrB;AACA;;AACAd,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACG,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAAhB,EANqB,CAOrB;AACA;;AACAd,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACE,CAAD,EAAIX,cAAc,CAACY,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAT,IAAAA,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBX,cAAc,CAACY,CAAC,EAAF,CAA/B;AACD;;AACD,SAAOC,CAAC,IAAIR,MAAZ,EAAoB;AAClB;AACA;AACAP,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACI,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAAhB,EAHkB,CAIlB;AACA;;AACAf,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACI,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAAhB,EANkB,CAOlB;AACA;;AACAf,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACE,CAAD,EAAIX,cAAc,CAACa,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAV,IAAAA,SAAS,CAACQ,CAAC,EAAF,CAAT,GAAiBX,cAAc,CAACa,CAAC,EAAF,CAA/B;AACD;AACF,C,CAWD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]);\n\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j, 1]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n\n//     animations.push([i, j, 0]);\n\n//     if (mainArray[i] <= mainArray[j]) {\n\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }"]},"metadata":{},"sourceType":"module"}