{"ast":null,"code":"import _slicedToArray from \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nvar ANIMATION_SPEED_MS = 5; // Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\n\nvar NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is thes color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = \"#90EE90\";\nconst MID_COLOR = \"green\";\nconst AFTER_SORTING_COLOR = \"turquoise\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); // Initialize the array\n\n    this.handleArraySizeChange = event => {\n      const newSize = parseInt(event.target.value, 10);\n      this.setState({\n        arraySize: newSize\n      }, this.resetArray);\n      this.setState({\n        arraySize: newSize\n      }, this.resetArray);\n    };\n\n    this.handleSortingSpeedChange = event => {\n      const newSpeed = 21 - parseInt(event.target.value, 10); // ANIMATION_SPEED_MS = newSpeed;\n\n      this.setState({\n        ANIMATION_SPEED_MS: newSpeed\n      }, this.resetArray);\n      this.setState({\n        ANIMATION_SPEED_MS: newSpeed\n      });\n    };\n\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS\n    };\n  }\n\n  // componentDidMount() {\n  //   this.resetArray();\n  // }\n  // Reset the array put all the new values\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array); // now we have all the value of i and j how they sorted accordingly\n    // animation contain sequence of mergeSort so we will iterate them\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i[0],\n            barTwoIdx = _animations$i[1],\n            count = _animations$i[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array); // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i2 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i2[0],\n            barTwoIdx = _animations$i2[1],\n            count = _animations$i2[2];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[j].style;\n          barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n        }, animations.length * ANIMATION_SPEED_MS);\n      }\n    }, 0 * ANIMATION_SPEED_MS);\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i3 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i3[0],\n            barTwoIdx = _animations$i3[1],\n            count = _animations$i3[2];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  render() {\n    const _this$state = this.state,\n          array = _this$state.array,\n          arraySize = _this$state.arraySize,\n          sortingSpeed = _this$state.sortingSpeed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"generateArray\",\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Array Size:\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"10\",\n      max: \"200\",\n      value: arraySize,\n      onChange: this.handleArraySizeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, arraySize)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Sorting Speed:\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"20\",\n      value: sortingSpeed,\n      onChange: this.handleSortingSpeedChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, sortingSpeed)), React.createElement(\"button\", {\n      id: \"mergesort\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      id: \"quicksort\",\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      id: \"heapsort\",\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      id: \"bubblesort\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Bubble Sort\")), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n// Selecting Random Value Using between min and max that is pass inside the reset function \n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","MID_COLOR","AFTER_SORTING_COLOR","SortingVisualizer","Component","constructor","props","handleArraySizeChange","event","newSize","parseInt","target","value","setState","arraySize","resetArray","handleSortingSpeedChange","newSpeed","state","array","i","push","randomIntFromInterval","mergeSort","animations","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","count","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","j","quickSort","heapSort","bubbleSort","render","sortingSpeed","map","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js'\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js'\nimport './SortingVisualizer.css';\n\n\n\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 5;\n\n// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is thes color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst THIRD_COLOR = \"#90EE90\"\n\nconst MID_COLOR = \"green\"\n\nconst AFTER_SORTING_COLOR = \"turquoise\"\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize the array\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS,\n    };\n  }\n\n\n  handleArraySizeChange = (event) => {\n    const newSize = parseInt(event.target.value, 10);\n    this.setState({ arraySize: newSize }, this.resetArray);\n    this.setState({ arraySize: newSize }, this.resetArray);\n  }\n\n  handleSortingSpeedChange = (event) => {\n    const newSpeed = 21 - parseInt(event.target.value, 10);\n    // ANIMATION_SPEED_MS = newSpeed;\n    this.setState({ ANIMATION_SPEED_MS: newSpeed }, this.resetArray);\n    this.setState({ ANIMATION_SPEED_MS: newSpeed });\n  }\n\n  // componentDidMount() {\n  //   this.resetArray();\n  // }\n\n  // Reset the array put all the new values\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({ array });\n  }\n\n\n\n\n  mergeSort() {\n\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n\n\n\n\n  quickSort() {\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[j].style;\n          barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n        }, animations.length * ANIMATION_SPEED_MS);\n\n      }\n    }, 0 * ANIMATION_SPEED_MS);\n\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n\n  render() {\n    const { array, arraySize, sortingSpeed } = this.state;\n\n    return (\n\n\n\n\n\n\n      <div>\n\n\n        <div id='toolbar'>\n          <button id='generateArray' onClick={() => this.resetArray()}>Generate New Array</button>\n\n\n          <div>\n            <label>Array Size:</label>\n            <input\n              type=\"range\"\n              min=\"10\"\n              max=\"200\"\n              value={arraySize}\n              onChange={this.handleArraySizeChange}\n            />\n            <span>{arraySize}</span>\n          </div>\n\n\n          <div>\n            <label>Sorting Speed:</label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"20\"\n              value={sortingSpeed}\n              onChange={this.handleSortingSpeedChange}\n            />\n            <span>{sortingSpeed}</span>\n          </div>\n\n\n\n          <button id='mergesort' onClick={() => this.mergeSort()}>Merge Sort</button>\n          <button id='quicksort' onClick={() => this.quickSort()}>Quick Sort</button>\n          <button id='heapsort' onClick={() => this.heapSort()}>Heap Sort</button>\n\n          <button id='bubblesort' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n\n\n        </div>\n\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n// Selecting Random Value Using between min and max that is pass inside the reset function \nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n"]},"metadata":{},"sourceType":"module"}