{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  //Setting Time complexities\n  document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\"; //Setting Space complexity\n\n  document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(mainArray, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = partition(mainArray, startIdx, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 3]);\n  quickSortHelper(mainArray, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(mainArray, pivotIdx + 1, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 4]);\n}\n\nfunction partition(mainArray, startIdx, endIdx, animations) {\n  const pivot = mainArray[startIdx];\n  let i = startIdx + 1;\n  let j = startIdx + 1;\n\n  while (j <= endIdx) {\n    animations.push([pivot, j, 0]);\n    animations.push([pivot, j, 4]);\n\n    while (j <= endIdx && mainArray[j] > pivot) {\n      animations.push([pivot, j, 0]);\n      animations.push([pivot, j, 4]);\n      j++;\n    }\n\n    if (j <= endIdx && mainArray[j] < pivot) {\n      animations.push([i, j, 0]); // animations.push([i, mainArray[j], 2]);\n      // animations.push([j, mainArray[i], 2]);\n\n      animations.push([i, j, 4]);\n      swap(mainArray, i, j);\n      i++;\n    }\n  }\n\n  animations.push([startIdx, i - 1, 0]); // animations.push([startIdx, mainArray[i - 1], 2]);\n  // animations.push([i - 1, mainArray[startIdx], 2]);\n\n  animations.push([startIdx, i - 1, 4]);\n  swap(mainArray, startIdx, i - 1);\n  return i - 1;\n} // function partition(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const pivot = mainArray[startIdx];\n//   let i = startIdx;\n//   let j = endIdx;\n//   while (i < j) {\n//     while (mainArray[i] <= pivot && i <= j) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([i, mainArray[i], 2]);\n//       i++;\n//     }\n//     while (mainArray[j] > pivot && j >= startIdx) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([j, mainArray[j], 2]);\n//       j--;\n//     }\n//     if (i < j) {\n//       animations.push([i, mainArray[j], 2]);\n//       animations.push([j, mainArray[i], 2]);\n//       swap(mainArray, i, j);\n//     }\n//   }\n//   animations.push([startIdx, mainArray[j], 2]);\n//   animations.push([j, mainArray[startIdx], 2]);\n//   swap(mainArray, startIdx, j);\n//   if (mainArray.length > endIdx + 1) {\n//     animations.push([endIdx + 1, endIdx + 1, 1]);\n//   }\n//   return j;\n// }\n\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","document","getElementById","innerText","animations","length","quickSortHelper","mainArray","startIdx","endIdx","pivotIdx","partition","push","pivot","i","j","swap","arr","temp"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\n\n  //Setting Time complexities\n  document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  //Setting Space complexity\n  document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  animations,\n) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = partition(mainArray, startIdx, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 3]);\n  quickSortHelper(mainArray, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(mainArray, pivotIdx + 1, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 4]);\n}\n\n\nfunction partition(mainArray, startIdx, endIdx, animations) {\n  const pivot = mainArray[startIdx];\n  let i = startIdx + 1;\n  let j = startIdx + 1;\n\n  while (j <= endIdx) {\n\n    animations.push([pivot, j, 0]);\n    animations.push([pivot, j, 4]);\n    while (j <= endIdx && mainArray[j] > pivot) {\n      animations.push([pivot, j, 0]);\n      animations.push([pivot, j, 4]);\n      j++;\n    }\n\n\n    if (j <= endIdx && mainArray[j] < pivot) {\n      animations.push([i, j, 0]);\n      // animations.push([i, mainArray[j], 2]);\n      // animations.push([j, mainArray[i], 2]);\n      animations.push([i, j, 4]);\n      swap(mainArray, i, j);\n      i++;\n    }\n  }\n\n  animations.push([startIdx, i - 1, 0]);\n  // animations.push([startIdx, mainArray[i - 1], 2]);\n  // animations.push([i - 1, mainArray[startIdx], 2]);\n  animations.push([startIdx, i - 1, 4]);\n  swap(mainArray, startIdx, (i - 1));\n  return (i - 1);\n}\n\n\n\n\n// function partition(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const pivot = mainArray[startIdx];\n//   let i = startIdx;\n//   let j = endIdx;\n\n//   while (i < j) {\n//     while (mainArray[i] <= pivot && i <= j) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([i, mainArray[i], 2]);\n//       i++;\n//     }\n//     while (mainArray[j] > pivot && j >= startIdx) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([j, mainArray[j], 2]);\n//       j--;\n//     }\n\n//     if (i < j) {\n\n//       animations.push([i, mainArray[j], 2]);\n//       animations.push([j, mainArray[i], 2]);\n//       swap(mainArray, i, j);\n//     }\n//   }\n//   animations.push([startIdx, mainArray[j], 2]);\n//   animations.push([j, mainArray[startIdx], 2]);\n//   swap(mainArray, startIdx, j);\n\n//   if (mainArray.length > endIdx + 1) {\n//     animations.push([endIdx + 1, endIdx + 1, 1]);\n//   }\n//   return j;\n\n// }\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n"]},"metadata":{},"sourceType":"module"}