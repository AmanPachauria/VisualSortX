{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  HeapSortHelper(array, array.length, animations);\n  return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n  //  1) max_heapify the array \n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    MaxHeapify(mainarray, n, i, animations);\n  }\n\n  for (let i = n - 1; i >= 0; i--) {\n    // animations.push([0, i, 0]);\n    animations.push([0, mainarray[i], 2]);\n    animations.push([i, mainarray[0], 2]);\n    animations.push([0, i, 4]);\n    swap(mainarray, 0, i);\n    MaxHeapify(mainarray, i, 0, animations);\n    animations.push([i, i, 1]);\n  }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n  let larger = i;\n  let left = 2 * i + 1;\n  let right = 2 * i + 2;\n\n  if (left < n && mainArray[larger] < mainArray[left]) {\n    if (larger != i) {\n      animamtions.push([larger, larger, 4]);\n    }\n\n    animations.push([larger, left, 0]); // animations.push([larger, left, 4]);\n\n    larger = left;\n  }\n\n  if (right < n && mainArray[larger] < mainArray[right]) {\n    if (larger !== i) {\n      animations.push([larger, larger, 4]);\n    }\n\n    animations.push([larger, right, 0]); // animations.push([larger, right, 4]);\n\n    larger = right;\n  }\n\n  if (larger != i) {\n    animations.push([larger, mainArray[i], 2]);\n    animations.push([i, mainArray[larger], 2]);\n    animations.push([larger, i, 4]);\n    swap(mainArray, larger, i);\n    MaxHeapify(mainArray, n, larger, animations);\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","length","HeapSortHelper","mainarray","n","i","Math","floor","MaxHeapify","push","swap","mainArray","larger","left","right","animamtions","arr","j","temp"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AACzC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,cAAc,CAACH,KAAD,EAAQA,KAAK,CAACE,MAAd,EAAsBD,UAAtB,CAAd;AACA,SAAOA,UAAP;AACH;;AAED,SAASE,cAAT,CAAwBC,SAAxB,EAAmCC,CAAnC,EAAsCJ,UAAtC,EAAkD;AAE9C;AAEA,OAAK,IAAIK,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,CAAf,IAAoB,CAAjC,EAAoCC,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC7CG,IAAAA,UAAU,CAACL,SAAD,EAAYC,CAAZ,EAAeC,CAAf,EAAkBL,UAAlB,CAAV;AACH;;AAED,OAAK,IAAIK,CAAC,GAAGD,CAAC,GAAG,CAAjB,EAAoBC,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAE7B;AACAL,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,CAAD,EAAIN,SAAS,CAACE,CAAD,CAAb,EAAkB,CAAlB,CAAhB;AACAL,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACJ,CAAD,EAAIF,SAAS,CAAC,CAAD,CAAb,EAAkB,CAAlB,CAAhB;AACAH,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,CAAD,EAAIJ,CAAJ,EAAO,CAAP,CAAhB;AACAK,IAAAA,IAAI,CAACP,SAAD,EAAY,CAAZ,EAAeE,CAAf,CAAJ;AAEAG,IAAAA,UAAU,CAACL,SAAD,EAAYE,CAAZ,EAAe,CAAf,EAAkBL,UAAlB,CAAV;AAEAA,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACJ,CAAD,EAAIA,CAAJ,EAAO,CAAP,CAAhB;AACH;AACJ;;AAED,SAASG,UAAT,CAAoBG,SAApB,EAA+BP,CAA/B,EAAkCC,CAAlC,EAAqCL,UAArC,EAAiD;AAC7C,MAAIY,MAAM,GAAGP,CAAb;AACA,MAAIQ,IAAI,GAAG,IAAIR,CAAJ,GAAQ,CAAnB;AACA,MAAIS,KAAK,GAAG,IAAIT,CAAJ,GAAQ,CAApB;;AAEA,MAAIQ,IAAI,GAAGT,CAAP,IAAYO,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACE,IAAD,CAA7C,EAAqD;AACjD,QAAID,MAAM,IAAIP,CAAd,EAAiB;AACbU,MAAAA,WAAW,CAACN,IAAZ,CAAiB,CAACG,MAAD,EAASA,MAAT,EAAiB,CAAjB,CAAjB;AACH;;AACDZ,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACG,MAAD,EAASC,IAAT,EAAe,CAAf,CAAhB,EAJiD,CAKjD;;AACAD,IAAAA,MAAM,GAAGC,IAAT;AACH;;AAED,MAAIC,KAAK,GAAGV,CAAR,IAAaO,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACG,KAAD,CAA9C,EAAuD;AACnD,QAAIF,MAAM,KAAKP,CAAf,EAAkB;AACdL,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAACG,MAAD,EAASA,MAAT,EAAiB,CAAjB,CAAhB;AACH;;AACDZ,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACG,MAAD,EAASE,KAAT,EAAgB,CAAhB,CAAhB,EAJmD,CAKnD;;AACAF,IAAAA,MAAM,GAAGE,KAAT;AACH;;AAED,MAAIF,MAAM,IAAIP,CAAd,EAAiB;AAEbL,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACG,MAAD,EAASD,SAAS,CAACN,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAL,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACJ,CAAD,EAAIM,SAAS,CAACC,MAAD,CAAb,EAAuB,CAAvB,CAAhB;AACAZ,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAACG,MAAD,EAASP,CAAT,EAAY,CAAZ,CAAhB;AACAK,IAAAA,IAAI,CAACC,SAAD,EAAYC,MAAZ,EAAoBP,CAApB,CAAJ;AACAG,IAAAA,UAAU,CAACG,SAAD,EAAYP,CAAZ,EAAeQ,MAAf,EAAuBZ,UAAvB,CAAV;AAEH;AACJ;;AAED,SAASU,IAAT,CAAcM,GAAd,EAAmBX,CAAnB,EAAsBY,CAAtB,EAAyB;AACrB,QAAMC,IAAI,GAAGF,GAAG,CAACX,CAAD,CAAhB;AACAW,EAAAA,GAAG,CAACX,CAAD,CAAH,GAASW,GAAG,CAACC,CAAD,CAAZ;AACAD,EAAAA,GAAG,CAACC,CAAD,CAAH,GAASC,IAAT;AACH","sourcesContent":["export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n\n        // animations.push([0, i, 0]);\n        animations.push([0, mainarray[i], 2]);\n        animations.push([i, mainarray[0], 2]);\n        animations.push([0, i, 4]);\n        swap(mainarray, 0, i);\n\n        MaxHeapify(mainarray, i, 0, animations);\n\n        animations.push([i, i, 1]);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        if (larger != i) {\n            animamtions.push([larger, larger, 4]);\n        }\n        animations.push([larger, left, 0]);\n        // animations.push([larger, left, 4]);\n        larger = left;\n    }\n\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        if (larger !== i) {\n            animations.push([larger, larger, 4]);\n        }\n        animations.push([larger, right, 0]);\n        // animations.push([larger, right, 4]);\n        larger = right;\n    }\n\n    if (larger != i) {\n\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        animations.push([larger, i, 4]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n\n    }\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}