{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]);\n\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j, 1]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n\n//     animations.push([i, j, 0]);\n\n//     if (mainArray[i] <= mainArray[j]) {\n\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","push","doMerge","k","i","j"],"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/MergeSort.js"],"sourcesContent":["export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]);\n\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j, 1]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n\n//     animations.push([i, j, 0]);\n\n//     if (mainArray[i] <= mainArray[j]) {\n\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}