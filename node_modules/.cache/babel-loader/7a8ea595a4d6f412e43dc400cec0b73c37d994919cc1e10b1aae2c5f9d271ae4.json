{"ast":null,"code":"var _jsxFileName = \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({\n      array\n    });\n  }\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.resetArray(),\n          children: \"Generate New Array\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.mergeSort(),\n          children: \"Merge Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.quickSort(),\n          children: \"Quick Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.heapSort(),\n          children: \"Heap Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.bubbleSort(),\n          children: \"Bubble Sort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            backgroundColor: PRIMARY_COLOR,\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"names":["React","getMergeSortAnimations","jsxDEV","_jsxDEV","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","render","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","map","value","idx","min","max","Math","floor","random"],"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx"],"sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n \n\n  render() {\n    const { array } = this.state;\n\n    return (\n\n      <div>\n\n        <div>\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        </div>\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n    \n      </div>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}