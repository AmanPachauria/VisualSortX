{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  HeapSortHelper(array, array.length, animations);\n  return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n  //  1) max_heapify the array \n  for (let i = n / 2; i >= 0; i--) {\n    MaxHeapify(mainarray, n, i, animations);\n  }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n  let larger = i;\n  let left = 2 * i + 1;\n  let right = 2 * i + 1;\n  animations.push([larger, left, 0]);\n  animations.push([larger, left, 1]);\n\n  if (left < n && mainArray[larger] < mainArray[left]) {\n    larger = left;\n  }\n\n  animations.push([larger, right, 0]);\n  animations.push([larger, right, 1]);\n\n  if (right < n && mainArray[larger] < mainArray[right]) {\n    larger = right;\n  }\n\n  if (larger != i) {\n    animations.push([larger, mainArray[i], 2]);\n    animations.push([i, mainArray[larger], 2]);\n    swap(mainArray, larger, i);\n    MaxHeapify(mainArray, n, larger, animations);\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","length","HeapSortHelper","mainarray","n","i","MaxHeapify","mainArray","larger","left","right","push","swap","arr","j","temp"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AACzC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,cAAc,CAACH,KAAD,EAAQA,KAAK,CAACE,MAAd,EAAsBD,UAAtB,CAAd;AACA,SAAOA,UAAP;AACH;;AAED,SAASE,cAAT,CAAwBC,SAAxB,EAAmCC,CAAnC,EAAsCJ,UAAtC,EAAkD;AAE9C;AACA,OAAK,IAAIK,CAAC,GAAGD,CAAC,GAAG,CAAjB,EAAoBC,CAAC,IAAI,CAAzB,EAA4BA,CAAC,EAA7B,EAAiC;AAC7BC,IAAAA,UAAU,CAACH,SAAD,EAAYC,CAAZ,EAAeC,CAAf,EAAkBL,UAAlB,CAAV;AACH;AACJ;;AAED,SAASM,UAAT,CAAoBC,SAApB,EAA+BH,CAA/B,EAAkCC,CAAlC,EAAqCL,UAArC,EAAiD;AAC7C,MAAIQ,MAAM,GAAGH,CAAb;AACA,MAAII,IAAI,GAAG,IAAIJ,CAAJ,GAAQ,CAAnB;AACA,MAAIK,KAAK,GAAG,IAAIL,CAAJ,GAAQ,CAApB;AAEAL,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,MAAD,EAASC,IAAT,EAAe,CAAf,CAAhB;AACAT,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,MAAD,EAASC,IAAT,EAAe,CAAf,CAAhB;;AACA,MAAIA,IAAI,GAAGL,CAAP,IAAYG,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACE,IAAD,CAA7C,EAAqD;AACjDD,IAAAA,MAAM,GAAGC,IAAT;AACH;;AAEDT,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,MAAD,EAASE,KAAT,EAAgB,CAAhB,CAAhB;AACAV,EAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,MAAD,EAASE,KAAT,EAAgB,CAAhB,CAAhB;;AACA,MAAIA,KAAK,GAAGN,CAAR,IAAaG,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACG,KAAD,CAA9C,EAAuD;AACnDF,IAAAA,MAAM,GAAGE,KAAT;AACH;;AAED,MAAIF,MAAM,IAAIH,CAAd,EAAiB;AACbL,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACH,MAAD,EAASD,SAAS,CAACF,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAL,IAAAA,UAAU,CAACW,IAAX,CAAgB,CAACN,CAAD,EAAIE,SAAS,CAACC,MAAD,CAAb,EAAuB,CAAvB,CAAhB;AACAI,IAAAA,IAAI,CAACL,SAAD,EAAYC,MAAZ,EAAoBH,CAApB,CAAJ;AACAC,IAAAA,UAAU,CAACC,SAAD,EAAYH,CAAZ,EAAeI,MAAf,EAAuBR,UAAvB,CAAV;AACH;AACJ;;AAED,SAASY,IAAT,CAAcC,GAAd,EAAmBR,CAAnB,EAAsBS,CAAtB,EAAyB;AACrB,QAAMC,IAAI,GAAGF,GAAG,CAACR,CAAD,CAAhB;AACAQ,EAAAA,GAAG,CAACR,CAAD,CAAH,GAASQ,GAAG,CAACC,CAAD,CAAZ;AACAD,EAAAA,GAAG,CAACC,CAAD,CAAH,GAASC,IAAT;AACH","sourcesContent":["export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n    for (let i = n / 2; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 1;\n\n    animations.push([larger, left, 0]);\n    animations.push([larger, left, 1]);\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        larger = left;\n    }\n\n    animations.push([larger, right, 0]);\n    animations.push([larger, right, 1]);\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        larger = right;\n    }\n\n    if (larger != i) {\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n    }\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}