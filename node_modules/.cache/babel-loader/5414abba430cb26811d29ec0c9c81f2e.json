{"ast":null,"code":"import _slicedToArray from \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nvar ANIMATION_SPEED_MS = 5; // Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\n\nvar NUMBER_OF_ARRAY_BARS = 200; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is thes color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = \"green\";\nconst MID_COLOR = \"yellow\";\nconst AFTER_SORTING_COLOR = \"turquoise\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array); // now we have all the value of i and j how they sorted accordingly\n    // animation contain sequence of mergeSort so we will iterate them\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i[0],\n            barTwoIdx = _animations$i[1],\n            count = _animations$i[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array); // now we have all the value of i and j how they sorted accordingly\n    // animation contain sequence of mergeSort so we will iterate them\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i2 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i2[0],\n            barTwoIdx = _animations$i2[1],\n            count = _animations$i2[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array); // now we have all the value of i and j how they sorted accordingly\n    // animation contain sequence of mergeSort so we will iterate them\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i3 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i3[0],\n            barTwoIdx = _animations$i3[1],\n            count = _animations$i3[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  render() {\n    const array = this.state.array;\n    return React.createElement(\"div\", {\n      id: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, \"Generate New Array\"), React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, \"Bubble Sort\")), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }))));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","MID_COLOR","AFTER_SORTING_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","count","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","j","quickSort","heapSort","bubbleSort","render","map","value","idx","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js'\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js'\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 5;\n\n// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS = 200;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is thes color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst THIRD_COLOR = \"green\"\n\nconst MID_COLOR = \"yellow\"\n\nconst AFTER_SORTING_COLOR = \"turquoise\"\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n       \n    const animations = getBubbleSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  \n  }\n\n \n\n  render() {\n    const { array } = this.state;\n\n    return (\n\n      <div id='toolbar'>\n\n        <div>\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        </div>\n\n\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n    \n      </div>\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}