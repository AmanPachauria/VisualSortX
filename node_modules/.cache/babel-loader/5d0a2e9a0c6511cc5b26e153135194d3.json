{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(mainArray, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = partition(mainArray, startIdx, endIdx, animations); // animations.push([pivotIdx, pivotIdx, 3]);\n\n  quickSortHelper(mainArray, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(mainArray, pivotIdx + 1, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 4]);\n}\n\nfunction partition(mainArray, startIdx, endIdx, animations) {\n  let i = startIdx + 1;\n  let pivot = mainArray[startIdx];\n  animations.push([startIdx, startIdx, 3]);\n\n  for (var j = startIdx + 1; j <= endIdx; j++) {\n    animations.push([startIdx, startIdx, 0]);\n    animations.push([startIdx, startIdx, 3]);\n    animations.push([j, j, 0]);\n\n    if (pivot > mainArray[j]) {\n      animations.push([i, i, 0]);\n      animations.push([i, mainArray[j], 2]);\n      animations.push([j, mainArray[i], 2]);\n      swap(mainArray, i, j); // animations.push([i, j, 4]);\n\n      i++;\n    }\n\n    animations.push([i - 1, j, 4]); // animations.push([i, i, 4]);\n    // animations.push([j, j, 4]);\n  }\n\n  animations.push([i - 1, startIdx, 0]);\n  animations.push([i - 1, mainArray[startIdx], 2]);\n  animations.push([startIdx, mainArray[i - 1], 2]);\n  animations.push([startIdx, i - 1, 4]);\n  swap(mainArray, startIdx, i - 1, animations);\n\n  for (var t = startIdx; t <= i; t++) {\n    animations.push([t, t, 4]);\n  }\n\n  return i - 1;\n} // function partition(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const pivot = mainArray[startIdx];\n//   let i = startIdx;\n//   let j = endIdx;\n//   while (i < j) {\n//     while (mainArray[i] <= pivot && i <= j) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([i, mainArray[i], 2]);\n//       i++;\n//     }\n//     while (mainArray[j] > pivot && j >= startIdx) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([j, mainArray[j], 2]);\n//       j--;\n//     }\n//     if (i < j) {\n//       animations.push([i, mainArray[j], 2]);\n//       animations.push([j, mainArray[i], 2]);\n//       swap(mainArray, i, j);\n//     }\n//   }\n//   animations.push([startIdx, mainArray[j], 2]);\n//   animations.push([j, mainArray[startIdx], 2]);\n//   swap(mainArray, startIdx, j);\n//   if (mainArray.length > endIdx + 1) {\n//     animations.push([endIdx + 1, endIdx + 1, 1]);\n//   }\n//   return j;\n// }\n\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/QuickSort.js"],"names":["getQuickSortAnimations","array","animations","length","quickSortHelper","mainArray","startIdx","endIdx","pivotIdx","partition","push","i","pivot","j","swap","t","arr","temp"],"mappings":"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","sourcesContent":["export function getQuickSortAnimations(array) {\n\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  animations,\n) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = partition(mainArray, startIdx, endIdx, animations);\n  // animations.push([pivotIdx, pivotIdx, 3]);\n  quickSortHelper(mainArray, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(mainArray, pivotIdx + 1, endIdx, animations);\n  animations.push([pivotIdx, pivotIdx, 4]);\n}\n\n\nfunction partition(mainArray, startIdx, endIdx, animations) {\n  let i = startIdx + 1;\n  let pivot = mainArray[startIdx];\n\n  animations.push([startIdx, startIdx, 3]);\n\n  for (var j = startIdx + 1; j <= endIdx; j++) {\n\n    animations.push([startIdx, startIdx, 0]);\n    animations.push([startIdx, startIdx, 3]);\n\n    animations.push([j, j, 0]);\n\n\n    if (pivot > mainArray[j]) {\n\n      animations.push([i, i, 0]);\n\n      animations.push([i, mainArray[j], 2]);\n      animations.push([j, mainArray[i], 2]);\n\n      swap(mainArray, i, j);\n\n      // animations.push([i, j, 4]);\n\n      i++;\n    }\n\n    animations.push([i - 1, j, 4]);\n\n    // animations.push([i, i, 4]);\n    // animations.push([j, j, 4]);\n  }\n\n  animations.push([i - 1, startIdx, 0]);\n  animations.push([i - 1, mainArray[startIdx], 2]);\n  animations.push([startIdx, mainArray[i - 1], 2]);\n  animations.push([startIdx, i - 1, 4]);\n  swap(mainArray, startIdx, i - 1, animations);\n\n  for (var t = startIdx; t <= i; t++) {\n    animations.push([t, t, 4]);\n  }\n\n  return i - 1;\n}\n\n\n\n\n// function partition(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const pivot = mainArray[startIdx];\n//   let i = startIdx;\n//   let j = endIdx;\n\n//   while (i < j) {\n//     while (mainArray[i] <= pivot && i <= j) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([i, mainArray[i], 2]);\n//       i++;\n//     }\n//     while (mainArray[j] > pivot && j >= startIdx) {\n//       animations.push([i, j, 0]);\n//       animations.push([i, j, 1]);\n//       animations.push([j, mainArray[j], 2]);\n//       j--;\n//     }\n\n//     if (i < j) {\n\n//       animations.push([i, mainArray[j], 2]);\n//       animations.push([j, mainArray[i], 2]);\n//       swap(mainArray, i, j);\n//     }\n//   }\n//   animations.push([startIdx, mainArray[j], 2]);\n//   animations.push([j, mainArray[startIdx], 2]);\n//   swap(mainArray, startIdx, j);\n\n//   if (mainArray.length > endIdx + 1) {\n//     animations.push([endIdx + 1, endIdx + 1, 1]);\n//   }\n//   return j;\n\n// }\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n"]},"metadata":{},"sourceType":"module"}