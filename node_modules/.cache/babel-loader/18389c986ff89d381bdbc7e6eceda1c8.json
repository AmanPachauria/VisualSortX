{"ast":null,"code":"export function getMergeSortAnimations(array){//Setting Time complexities\n// document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n// document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n// document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n// //Setting Space complexity\n// document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\nvar animations=[];if(array.length<=1)return array;var auxiliaryArray=array.slice();mergeSortHelper(array,0,array.length-1,auxiliaryArray,animations);return animations;}function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations){if(startIdx===endIdx)return;var middleIdx=Math.floor((startIdx+endIdx)/2);animations.push([middleIdx,middleIdx,3]);mergeSortHelper(auxiliaryArray,startIdx,middleIdx,mainArray,animations);mergeSortHelper(auxiliaryArray,middleIdx+1,endIdx,mainArray,animations);doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations);}function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations){var k=startIdx;var i=startIdx;var j=middleIdx+1;while(i<=middleIdx&&j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,j,0]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,j,1]);if(auxiliaryArray[i]<=auxiliaryArray[j]){// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i],2]);mainArray[k++]=auxiliaryArray[i++];}else{// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j],2]);mainArray[k++]=auxiliaryArray[j++];}}while(i<=middleIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([i,i,0]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([i,i,1]);// We overwrite the value at index k in the original array with the\n// value at index i in the auxiliary array.\nanimations.push([k,auxiliaryArray[i],2]);mainArray[k++]=auxiliaryArray[i++];}while(j<=endIdx){// These are the values that we're comparing; we push them once\n// to change their color.\nanimations.push([j,j,0]);// These are the values that we're comparing; we push them a second\n// time to revert their color.\nanimations.push([j,j,1]);// We overwrite the value at index k in the original array with the\n// value at index j in the auxiliary array.\nanimations.push([k,auxiliaryArray[j],2]);mainArray[k++]=auxiliaryArray[j++];}}// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     if (mainArray[i] <= mainArray[j]) {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }","map":{"version":3,"sources":["/home/aman/Documents/Projects/VisualSortX/src/sortingAlgorithms/MergeSort.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","push","doMerge","k","i","j"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n\n\n  //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]);\n\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j, 1]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n\n//     animations.push([i, j, 0]);\n\n//     if (mainArray[i] <= mainArray[j]) {\n\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }"]},"metadata":{},"sourceType":"module"}