{"ast":null,"code":"export function getHeapSortAnimations(array){// //Setting Time complexities\n// document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n// document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n// document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n// //Setting Space complexity\n// document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\nvar animations=[];if(array.length<=1)return array;HeapSortHelper(array,array.length,animations);return animations;}function HeapSortHelper(mainarray,n,animations){//  1) max_heapify the array \nfor(var i=Math.floor(n/2)-1;i>=0;i--){MaxHeapify(mainarray,n,i,animations);}for(var _i=n-1;_i>=0;_i--){// animations.push([0, i, 0]);\nanimations.push([0,mainarray[_i],2]);animations.push([_i,mainarray[0],2]);animations.push([0,_i,4]);swap(mainarray,0,_i);animations.push([_i,_i,3]);MaxHeapify(mainarray,_i,0,animations);animations.push([_i,_i,1]);}}function MaxHeapify(mainArray,n,i,animations){var larger=i;var left=2*i+1;var right=2*i+2;if(left<n&&mainArray[larger]<mainArray[left]){animations.push([larger,left,0]);larger=left;}if(right<n&&mainArray[larger]<mainArray[right]){if(larger!==i){animations.push([larger,larger,4]);}animations.push([i,right,0]);// animations.push([larger, right, 4]);\nlarger=right;}if(larger!==i){animations.push([larger,mainArray[i],2]);animations.push([i,mainArray[larger],2]);animations.push([larger,i,4]);swap(mainArray,larger,i);MaxHeapify(mainArray,n,larger,animations);}// animations.push([larger, i, 3]);\n}function swap(arr,i,j){var temp=arr[i];arr[i]=arr[j];arr[j]=temp;}","map":{"version":3,"sources":["/home/aman/Documents/Projects/VisualSortX/src/sortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","length","HeapSortHelper","mainarray","n","i","Math","floor","MaxHeapify","push","swap","mainArray","larger","left","right","arr","j","temp"],"mappings":"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","sourcesContent":["export function getHeapSortAnimations(array) {\n\n    // //Setting Time complexities\n    // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n    // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n    // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n    // //Setting Space complexity\n    // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n\n        // animations.push([0, i, 0]);\n        animations.push([0, mainarray[i], 2]);\n        animations.push([i, mainarray[0], 2]);\n        animations.push([0, i, 4]);\n        swap(mainarray, 0, i);\n        animations.push([i, i, 3]);\n        MaxHeapify(mainarray, i, 0, animations);\n        animations.push([i, i, 1]);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        animations.push([larger, left, 0]);\n        larger = left;\n    }\n\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        if (larger !== i) {\n            animations.push([larger, larger, 4]);\n        }\n        animations.push([i, right, 0]);\n        // animations.push([larger, right, 4]);\n        larger = right;\n    }\n\n    if (larger !== i) {\n\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        animations.push([larger, i, 4]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n\n    }\n\n    // animations.push([larger, i, 3]);\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}