{"ast":null,"code":"export function getHeapSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  HeapSortHelper(array, array.length, animations);\n  return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n  //  1) max_heapify the array \n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    MaxHeapify(mainarray, n, i, animations);\n  }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n  let larger = i;\n  let left = 2 * i + 1;\n  let right = 2 * i + 1;\n\n  if (left < n && mainArray[larger] < mainArray[left]) {\n    animations.push([larger, left, 0]);\n    animations.push([larger, left, 1]);\n    larger = left;\n  }\n\n  if (right < n && mainArray[larger] < mainArray[right]) {\n    animations.push([larger, right, 0]);\n    animations.push([larger, right, 1]);\n    larger = right;\n  }\n\n  if (larger != i) {\n    animations.push([larger, mainArray[i], 2]);\n    animations.push([i, mainArray[larger], 2]);\n    animations.push([larger, i, 1]);\n    swap(mainArray, larger, i);\n    MaxHeapify(mainArray, n, larger, animations);\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/HeapSort.js"],"names":["getHeapSortAnimations","array","animations","length","HeapSortHelper","mainarray","n","i","Math","floor","MaxHeapify","mainArray","larger","left","right","push","swap","arr","j","temp"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AACzC,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,cAAc,CAACH,KAAD,EAAQA,KAAK,CAACE,MAAd,EAAsBD,UAAtB,CAAd;AACA,SAAOA,UAAP;AACH;;AAED,SAASE,cAAT,CAAwBC,SAAxB,EAAmCC,CAAnC,EAAsCJ,UAAtC,EAAkD;AAE9C;AAEA,OAAK,IAAIK,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAG,CAAf,IAAoB,CAAjC,EAAoCC,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC7CG,IAAAA,UAAU,CAACL,SAAD,EAAYC,CAAZ,EAAeC,CAAf,EAAkBL,UAAlB,CAAV;AACH;AACJ;;AAED,SAASQ,UAAT,CAAoBC,SAApB,EAA+BL,CAA/B,EAAkCC,CAAlC,EAAqCL,UAArC,EAAiD;AAC7C,MAAIU,MAAM,GAAGL,CAAb;AACA,MAAIM,IAAI,GAAG,IAAIN,CAAJ,GAAQ,CAAnB;AACA,MAAIO,KAAK,GAAG,IAAIP,CAAJ,GAAQ,CAApB;;AAEA,MAAIM,IAAI,GAAGP,CAAP,IAAYK,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACE,IAAD,CAA7C,EAAqD;AACjDX,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASC,IAAT,EAAe,CAAf,CAAhB;AACAX,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASC,IAAT,EAAe,CAAf,CAAhB;AACAD,IAAAA,MAAM,GAAGC,IAAT;AACH;;AAED,MAAIC,KAAK,GAAGR,CAAR,IAAaK,SAAS,CAACC,MAAD,CAAT,GAAoBD,SAAS,CAACG,KAAD,CAA9C,EAAuD;AACnDZ,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASE,KAAT,EAAgB,CAAhB,CAAhB;AACAZ,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASE,KAAT,EAAgB,CAAhB,CAAhB;AACAF,IAAAA,MAAM,GAAGE,KAAT;AACH;;AAED,MAAIF,MAAM,IAAIL,CAAd,EAAiB;AACbL,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASD,SAAS,CAACJ,CAAD,CAAlB,EAAuB,CAAvB,CAAhB;AACAL,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACR,CAAD,EAAII,SAAS,CAACC,MAAD,CAAb,EAAuB,CAAvB,CAAhB;AACAV,IAAAA,UAAU,CAACa,IAAX,CAAgB,CAACH,MAAD,EAASL,CAAT,EAAY,CAAZ,CAAhB;AACAS,IAAAA,IAAI,CAACL,SAAD,EAAYC,MAAZ,EAAoBL,CAApB,CAAJ;AACAG,IAAAA,UAAU,CAACC,SAAD,EAAYL,CAAZ,EAAeM,MAAf,EAAuBV,UAAvB,CAAV;AACH;AACJ;;AAED,SAASc,IAAT,CAAcC,GAAd,EAAmBV,CAAnB,EAAsBW,CAAtB,EAAyB;AACrB,QAAMC,IAAI,GAAGF,GAAG,CAACV,CAAD,CAAhB;AACAU,EAAAA,GAAG,CAACV,CAAD,CAAH,GAASU,GAAG,CAACC,CAAD,CAAZ;AACAD,EAAAA,GAAG,CAACC,CAAD,CAAH,GAASC,IAAT;AACH","sourcesContent":["export function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 1;\n\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        animations.push([larger, left, 0]);\n        animations.push([larger, left, 1]);\n        larger = left;\n    }\n\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        animations.push([larger, right, 0]);\n        animations.push([larger, right, 1]);\n        larger = right;\n    }\n\n    if (larger != i) {\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        animations.push([larger, i, 1]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n    }\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}