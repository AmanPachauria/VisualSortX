{"ast":null,"code":"import _slicedToArray from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/home/aman/Documents/Projects/VisualSortX/node_modules/@babel/runtime/helpers/esm/inherits\";import React from'react';import{getMergeSortAnimations}from'../sortingAlgorithms/MergeSort.js';import{getQuickSortAnimations}from'../sortingAlgorithms/QuickSort.js';import{getHeapSortAnimations}from'../sortingAlgorithms/HeapSort.js';import{getBubbleSortAnimations}from'../sortingAlgorithms/BubbleSort.js';import'./SortingVisualizer.css';// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS=250;// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS=70;// This is the main color of the array bars.\nvar PRIMARY_COLOR='#43A6C6';// This is thes color of array bars that are being compared throughout the animations.\nvar SECONDARY_COLOR='red';var THIRD_COLOR=\"green\";var MID_COLOR=\"yellow\";var AFTER_SORTING_COLOR=\"#43A6C6\";var SortingVisualizer=/*#__PURE__*/function(_React$Component){_inherits(SortingVisualizer,_React$Component);function SortingVisualizer(props){var _this;_classCallCheck(this,SortingVisualizer);_this=_possibleConstructorReturn(this,_getPrototypeOf(SortingVisualizer).call(this,props));// Initialize the array\n_this.handleArraySizeChange=function(event){var newSize=parseInt(event.target.value,10);NUMBER_OF_ARRAY_BARS=newSize;_this.setState({arraySize:newSize},_this.resetArray);};_this.handleSortingSpeedChange=function(event){var newSpeed=501-parseInt(event.target.value,10);ANIMATION_SPEED_MS=newSpeed;_this.setState({ANIMATION_SPEED_MS:newSpeed});};_this.reloadPage=function(){window.location.reload();// This reloads the page\n};_this.state={array:[],NUMBER_OF_ARRAY_BARS:NUMBER_OF_ARRAY_BARS,// sortingSpeed: 500,\nANIMATION_SPEED_MS:ANIMATION_SPEED_MS,arraySize:70// timeComplexityLabel: 'Time Complexity\\n\\nBest Case:\\n\\nAverage Case:\\n\\nWorst Case:',\n// spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case:',\n};return _this;}_createClass(SortingVisualizer,[{key:\"componentDidMount\",value:function componentDidMount(){this.resetArray();}// Reset the array put all the new values\n},{key:\"resetArray\",value:function resetArray(){var array=[];for(var i=0;i<NUMBER_OF_ARRAY_BARS;i++){// array.push(randomIntFromInterval(5, 730));\narray.push(randomIntFromInterval(5,550));}this.setState({array:array});}},{key:\"mergeSort\",value:function mergeSort(){// this.setState({\n//   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\n\\nAverage Case: O(nlog(n))\\n\\nWorst Case: O(nlog(n))',\n//   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n// });\n// We will call getMergeSortAnimations and will sort the array and push back their i and j value \n// how they are working in background \nvar animations=getMergeSortAnimations(this.state.array);// now we have all the value of i and j how they sorted accordingly\n// animation contain sequence of mergeSort so we will iterate them\nvar _loop=function _loop(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i=_slicedToArray(animations[i],3),barOneIdx=_animations$i[0],barTwoIdx=_animations$i[1],count=_animations$i[2];if(count===0){var barOneStyle=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else if(count===1){var _barOneStyle=arrayBars[barOneIdx].style;var _barTwoStyle=arrayBars[barTwoIdx].style;var _color=THIRD_COLOR;setTimeout(function(){_barOneStyle.backgroundColor=_color;_barTwoStyle.backgroundColor=_color;},i*ANIMATION_SPEED_MS);}else if(count===2){setTimeout(function(){var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(barTwoIdx,\"px\");},i*ANIMATION_SPEED_MS);}else if(count===3){var _barOneStyle2=arrayBars[barOneIdx].style;setTimeout(function(){_barOneStyle2.backgroundColor=MID_COLOR;},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop(i);}var arrayBars=document.getElementsByClassName('array-bar');setTimeout(function(){for(var j=0;j<arrayBars.length;j++){var barOneStyle=arrayBars[j].style;barOneStyle.backgroundColor=AFTER_SORTING_COLOR;}},animations.length*ANIMATION_SPEED_MS);}},{key:\"quickSort\",value:function quickSort(){// this.setState({\n//   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n//   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n// });\nvar animations=getQuickSortAnimations(this.state.array);// animations.push([0, 0, 4]);\nvar _loop2=function _loop2(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i2=_slicedToArray(animations[i],3),barOneIdx=_animations$i2[0],barTwoIdx=_animations$i2[1],count=_animations$i2[2];if(count===0){var barOneStyle=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else if(count===1){var _barOneStyle3=arrayBars[barOneIdx].style;var _barTwoStyle2=arrayBars[barTwoIdx].style;var _color2=THIRD_COLOR;setTimeout(function(){_barOneStyle3.backgroundColor=_color2;_barTwoStyle2.backgroundColor=_color2;},i*ANIMATION_SPEED_MS);}else if(count===2){setTimeout(function(){var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(barTwoIdx,\"px\");},i*ANIMATION_SPEED_MS);}else if(count===3){var _barOneStyle4=arrayBars[barOneIdx].style;setTimeout(function(){_barOneStyle4.backgroundColor=MID_COLOR;},i*ANIMATION_SPEED_MS);}else if(count===4){var _barOneStyle5=arrayBars[barOneIdx].style;var _barTwoStyle3=arrayBars[barTwoIdx].style;var _color3=PRIMARY_COLOR;setTimeout(function(){_barOneStyle5.backgroundColor=_color3;_barTwoStyle3.backgroundColor=_color3;},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop2(i);}var arrayBars=document.getElementsByClassName('array-bar');setTimeout(function(){for(var j=0;j<arrayBars.length;j++){var barOneStyle=arrayBars[j].style;barOneStyle.backgroundColor=AFTER_SORTING_COLOR;}},animations.length*ANIMATION_SPEED_MS);}},{key:\"heapSort\",value:function heapSort(){// this.setState({\n//   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n//   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n// });\n// We leave it as an exercise to the viewer of this code to implement this method.\nvar animations=getHeapSortAnimations(this.state.array);// animations.push([0, 0, 4]);\nvar _loop3=function _loop3(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i3=_slicedToArray(animations[i],3),barOneIdx=_animations$i3[0],barTwoIdx=_animations$i3[1],count=_animations$i3[2];if(count===0){var barOneStyle=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=SECONDARY_COLOR;setTimeout(function(){barOneStyle.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else if(count===1){var _barOneStyle6=arrayBars[barOneIdx].style;var _barTwoStyle4=arrayBars[barTwoIdx].style;var _color4=THIRD_COLOR;setTimeout(function(){_barOneStyle6.backgroundColor=_color4;_barTwoStyle4.backgroundColor=_color4;},i*ANIMATION_SPEED_MS);}else if(count===2){setTimeout(function(){var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(barTwoIdx,\"px\");},i*ANIMATION_SPEED_MS);}else if(count===3){var _barOneStyle7=arrayBars[barOneIdx].style;setTimeout(function(){_barOneStyle7.backgroundColor=MID_COLOR;},i*ANIMATION_SPEED_MS);}else if(count===4){var _barOneStyle8=arrayBars[barOneIdx].style;var _barTwoStyle5=arrayBars[barTwoIdx].style;var _color5=PRIMARY_COLOR;setTimeout(function(){_barOneStyle8.backgroundColor=_color5;_barTwoStyle5.backgroundColor=_color5;},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop3(i);}var arrayBars=document.getElementsByClassName('array-bar');setTimeout(function(){for(var j=0;j<arrayBars.length;j++){var barOneStyle=arrayBars[j].style;barOneStyle.backgroundColor=AFTER_SORTING_COLOR;}},animations.length*ANIMATION_SPEED_MS);}},{key:\"bubbleSort\",value:function bubbleSort(){// this.setState({\n//   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n//   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n// });\nvar animations=getBubbleSortAnimations(this.state.array);var _loop4=function _loop4(i){var arrayBars=document.getElementsByClassName('array-bar');var _animations$i4=_slicedToArray(animations[i],3),barOneIdx=_animations$i4[0],barTwoIdx=_animations$i4[1],count=_animations$i4[2];if(count===3){var barOneStyle=arrayBars[barOneIdx].style;setTimeout(function(){barOneStyle.backgroundColor=THIRD_COLOR;},i*ANIMATION_SPEED_MS);}else if(count===0||count===1){var _barOneStyle9=arrayBars[barOneIdx].style;var barTwoStyle=arrayBars[barTwoIdx].style;var color=count===0?SECONDARY_COLOR:PRIMARY_COLOR;setTimeout(function(){_barOneStyle9.backgroundColor=color;barTwoStyle.backgroundColor=color;},i*ANIMATION_SPEED_MS);}else if(count===2){setTimeout(function(){var barOneStyle=arrayBars[barOneIdx].style;barOneStyle.height=\"\".concat(barTwoIdx,\"px\");},i*ANIMATION_SPEED_MS);}};for(var i=0;i<animations.length;i++){_loop4(i);}var arrayBars=document.getElementsByClassName('array-bar');setTimeout(function(){for(var j=0;j<arrayBars.length;j++){var barOneStyle=arrayBars[j].style;barOneStyle.backgroundColor=AFTER_SORTING_COLOR;}},animations.length*ANIMATION_SPEED_MS);}},{key:\"render\",value:function render(){var _this2=this;var _this$state=this.state,array=_this$state.array,arraySize=_this$state.arraySize,sortingSpeed=_this$state.sortingSpeed;return React.createElement(\"div\",null,React.createElement(\"div\",{id:\"toolbar\"},React.createElement(\"div\",{className:\"toolbar-left\"},React.createElement(\"button\",{id:\"generateArray\",className:\"button-style\",onClick:function onClick(){return _this2.resetArray();}},\"Generate New Array\")),React.createElement(\"div\",{id:\"slider\"},React.createElement(\"div\",null,React.createElement(\"label\",null,\"Array Size:\"),React.createElement(\"input\",{type:\"range\",min:\"15\",max:\"70\",value:arraySize,onChange:this.handleArraySizeChange}),React.createElement(\"span\",null,arraySize)),React.createElement(\"div\",null,React.createElement(\"label\",null,\"Sorting Speed:\"),React.createElement(\"input\",{type:\"range\",min:\"1\",max:\"500\",value:sortingSpeed,onChange:this.handleSortingSpeedChange}),React.createElement(\"span\",null,sortingSpeed))),React.createElement(\"div\",{id:\"sorting-algorithms\"},React.createElement(\"button\",{id:\"mergesort\",className:\"button-style\",onClick:function onClick(){return _this2.mergeSort();}},\"Merge Sort\"),React.createElement(\"button\",{id:\"quicksort\",className:\"button-style\",onClick:function onClick(){return _this2.quickSort();}},\"Quick Sort\"),React.createElement(\"button\",{id:\"heapsort\",className:\"button-style\",onClick:function onClick(){return _this2.heapSort();}},\"Heap Sort\"),React.createElement(\"button\",{id:\"bubblesort\",className:\"button-style\",onClick:function onClick(){return _this2.bubbleSort();}},\"Bubble Sort\")),React.createElement(\"div\",{id:\"Reset-button\"},React.createElement(\"button\",{id:\"reload\",className:\"button-style\",onClick:this.reloadPage},\"Reset\"))),React.createElement(\"div\",{className:\"array-container\"},React.createElement(\"div\",{className:\"inner-array-container\"},array.map(function(value,idx){return React.createElement(\"div\",{className:\"array-bar\",key:idx,style:{backgroundColor:PRIMARY_COLOR,// flex: `0 0 calc(100% / ${arraySize})`,\nwidth:\"\".concat(100/(arraySize+50),\"%\"),height:\"\".concat(value,\"px\")}});}))));}}]);return SortingVisualizer;}(React.Component);// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n// Selecting Random Value Using between min and max that is pass inside the reset function \nexport{SortingVisualizer as default};function randomIntFromInterval(min,max){// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}","map":{"version":3,"sources":["/home/aman/Documents/Projects/VisualSortX/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","MID_COLOR","AFTER_SORTING_COLOR","SortingVisualizer","props","handleArraySizeChange","event","newSize","parseInt","target","value","setState","arraySize","resetArray","handleSortingSpeedChange","newSpeed","reloadPage","window","location","reload","state","array","i","push","randomIntFromInterval","animations","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","count","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","length","j","sortingSpeed","mergeSort","quickSort","heapSort","bubbleSort","map","idx","width","Component","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js'\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js'\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js'\nimport './SortingVisualizer.css';\n\n\n\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 250;\n\n// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS = 70;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#43A6C6';\n\n// This is thes color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst THIRD_COLOR = \"green\"\n\nconst MID_COLOR = \"yellow\"\n\nconst AFTER_SORTING_COLOR = \"#43A6C6\"\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize the array\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      // sortingSpeed: 500,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS,\n      arraySize: 70,\n      // timeComplexityLabel: 'Time Complexity\\n\\nBest Case:\\n\\nAverage Case:\\n\\nWorst Case:',\n      // spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case:',\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // Reset the array put all the new values\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({ array });\n  }\n\n\n  handleArraySizeChange = (event) => {\n    const newSize = parseInt(event.target.value, 10);\n    NUMBER_OF_ARRAY_BARS = newSize;\n    this.setState({ arraySize: newSize }, this.resetArray);\n  }\n\n  handleSortingSpeedChange = (event) => {\n    const newSpeed = 501 - parseInt(event.target.value, 10);\n    ANIMATION_SPEED_MS = newSpeed;\n    this.setState({ ANIMATION_SPEED_MS: newSpeed });\n  }\n\n\n  reloadPage = () => {\n    window.location.reload(); // This reloads the page\n  };\n\n\n\n  mergeSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\n\\nAverage Case: O(nlog(n))\\n\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n\n\n\n\n  quickSort() {\n\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  heapSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    // We leave it as an exercise to the viewer of this code to implement this method.\n\n    const animations = getHeapSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  bubbleSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n\n  render() {\n    const { array, arraySize, sortingSpeed } = this.state;\n\n    return (\n\n\n      <div>\n\n        {/* <div>\n          <h1>Sorting Visualizer</h1>\n        </div> */}\n\n\n        <div id='toolbar'>\n          <div className=\"toolbar-left\">\n            <button id='generateArray' className='button-style' onClick={() => this.resetArray()}>Generate New Array</button>\n          </div>\n\n          <div id='slider'>\n            <div>\n              <label>Array Size:</label>\n              <input\n                type=\"range\"\n                min=\"15\"\n                max=\"70\"\n                value={arraySize}\n                onChange={this.handleArraySizeChange}\n              />\n              <span>{arraySize}</span>\n            </div>\n\n\n            <div>\n              <label>Sorting Speed:</label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"500\"\n                value={sortingSpeed}\n                onChange={this.handleSortingSpeedChange}\n              />\n              <span>{sortingSpeed}</span>\n            </div>\n          </div>\n\n\n          <div id='sorting-algorithms'>\n            <button id='mergesort' className='button-style' onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button id='quicksort' className='button-style' onClick={() => this.quickSort()}>Quick Sort</button>\n            <button id='heapsort' className='button-style' onClick={() => this.heapSort()}>Heap Sort</button>\n            <button id='bubblesort' className='button-style' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </div>\n\n          <div id='Reset-button'>\n            <button id=\"reload\" className='button-style' onClick={this.reloadPage}>\n              Reset\n            </button>\n          </div>\n\n          {/* <button id='reset' onClick={this.resetApplication}>Reset</button> */}\n\n\n        </div>\n\n\n        <div className=\"array-container\">\n\n\n\n          { /* <div className=\"complexity-column\">\n            <div className=\"time-complexity\">\n              <h2>TIME COMPLEXITY</h2>\n\n              <div className=\"complexity-cases\">\n\n                <div>\n                  <p class=\"Sub_Heading\">Worst case:</p>\n                  <p id=\"Time_Worst\"></p>\n                </div>\n\n                <div>\n                  <p class=\"Sub_Heading\">Average case:</p>\n                  <p id=\"Time_Average\"></p>\n                </div>\n\n                <div>\n                  <p class=\"Sub_Heading\">Best case:</p>\n                  <p id=\"Time_Best\"></p>\n                </div>\n\n              </div>\n\n            </div>\n      </div> */ }\n\n\n\n\n\n          <div className='inner-array-container'>\n            {array.map((value, idx) => (\n              <div className=\"array-bar\" key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  // flex: `0 0 calc(100% / ${arraySize})`,\n                  width: `${100 / (arraySize + 50)}%`,\n                  height: `${value}px`,\n                }}>\n\n              </div>\n            ))}\n          </div>\n\n\n\n          { /* <div className=\"space-complexity\">\n            <h2>SPACE COMPLEXITY</h2>\n            <div className=\"complexity-cases\">\n              <div>\n                <p class=\"Sub_Heading\">Worst case:</p>\n                <p id=\"Space_Worst\"></p>\n              </div>\n            </div>\n          </div> */ }\n\n\n        </div>\n\n\n\n      </div >\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n// Selecting Random Value Using between min and max that is pass inside the reset function \nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n"]},"metadata":{},"sourceType":"module"}