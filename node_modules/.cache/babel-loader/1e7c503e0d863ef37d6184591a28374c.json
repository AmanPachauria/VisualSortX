{"ast":null,"code":"import _slicedToArray from \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js';\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nvar ANIMATION_SPEED_MS = 250; // Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\n\nvar NUMBER_OF_ARRAY_BARS = 70; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = '#43A6C6'; // This is thes color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst THIRD_COLOR = \"green\";\nconst MID_COLOR = \"yellow\";\nconst AFTER_SORTING_COLOR = \"#43A6C6\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props); // Initialize the array\n\n    this.handleArraySizeChange = event => {\n      const newSize = parseInt(event.target.value, 10);\n      NUMBER_OF_ARRAY_BARS = newSize;\n      this.setState({\n        arraySize: newSize\n      }, this.resetArray);\n    };\n\n    this.handleSortingSpeedChange = event => {\n      const newSpeed = 501 - parseInt(event.target.value, 10);\n      ANIMATION_SPEED_MS = newSpeed;\n      this.setState({\n        ANIMATION_SPEED_MS: newSpeed\n      });\n    };\n\n    this.reloadPage = () => {\n      window.location.reload(); // This reloads the page\n    };\n\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      // sortingSpeed: 500,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS,\n      arraySize: 70,\n      timeComplexityLabel: 'Time Complexity\\n\\nBest Case:\\n\\nAverage Case:\\n\\nWorst Case:',\n      spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case:'\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  } // Reset the array put all the new values\n\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\n\\nAverage Case: O(nlog(n))\\n\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array); // now we have all the value of i and j how they sorted accordingly\n    // animation contain sequence of mergeSort so we will iterate them\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i[0],\n            barTwoIdx = _animations$i[1],\n            count = _animations$i[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  quickSort() {\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    const animations = getQuickSortAnimations(this.state.array); // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i2 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i2[0],\n            barTwoIdx = _animations$i2[1],\n            count = _animations$i2[2];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[j].style;\n          barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n        }, animations.length * ANIMATION_SPEED_MS);\n      }\n    }, 0 * ANIMATION_SPEED_MS);\n  }\n\n  heapSort() {\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getHeapSortAnimations(this.state.array); // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i3 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i3[0],\n            barTwoIdx = _animations$i3[1],\n            count = _animations$i3[2];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  bubbleSort() {\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const _animations$i4 = _slicedToArray(animations[i], 3),\n            barOneIdx = _animations$i4[0],\n            barTwoIdx = _animations$i4[1],\n            count = _animations$i4[2];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = \"\".concat(barTwoIdx, \"px\");\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n  render() {\n    const _this$state = this.state,\n          array = _this$state.array,\n          arraySize = _this$state.arraySize,\n          sortingSpeed = _this$state.sortingSpeed,\n          timeComplexityLabel = _this$state.timeComplexityLabel,\n          spaceComplexityLabel = _this$state.spaceComplexityLabel;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"toolbar-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"generateArray\",\n      className: \"button-style\",\n      onClick: () => this.resetArray(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Generate New Array\")), React.createElement(\"div\", {\n      id: \"slider\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"Array Size:\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"15\",\n      max: \"70\",\n      value: arraySize,\n      onChange: this.handleArraySizeChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, arraySize)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, \"Sorting Speed:\"), React.createElement(\"input\", {\n      type: \"range\",\n      min: \"1\",\n      max: \"500\",\n      value: sortingSpeed,\n      onChange: this.handleSortingSpeedChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, sortingSpeed))), React.createElement(\"div\", {\n      id: \"sorting-algorithms\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"mergesort\",\n      className: \"button-style\",\n      onClick: () => this.mergeSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"Merge Sort\"), React.createElement(\"button\", {\n      id: \"quicksort\",\n      className: \"button-style\",\n      onClick: () => this.quickSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, \"Quick Sort\"), React.createElement(\"button\", {\n      id: \"heapsort\",\n      className: \"button-style\",\n      onClick: () => this.heapSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, \"Heap Sort\"), React.createElement(\"button\", {\n      id: \"bubblesort\",\n      className: \"button-style\",\n      onClick: () => this.bubbleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"Bubble Sort\")), React.createElement(\"div\", {\n      id: \"Reset-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"reload\",\n      className: \"button-style\",\n      onClick: this.reloadPage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"Reset\"))), React.createElement(\"div\", {\n      className: \"array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }, \"TIME COMPLEXITY\"), React.createElement(\"div\", {\n      className: \"inner-array-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, array.map((value, idx) => React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        // flex: `0 0 calc(100% / ${arraySize})`,\n        width: \"\".concat(100 / (arraySize + 50), \"%\"),\n        height: \"\".concat(value, \"px\")\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"space-complexity-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, spaceComplexityLabel)));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n// Selecting Random Value Using between min and max that is pass inside the reset function \n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/home/aman/Documents/Projects/Sorting-Visualizer-Tutorial-master/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getHeapSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","THIRD_COLOR","MID_COLOR","AFTER_SORTING_COLOR","SortingVisualizer","Component","constructor","props","handleArraySizeChange","event","newSize","parseInt","target","value","setState","arraySize","resetArray","handleSortingSpeedChange","newSpeed","reloadPage","window","location","reload","state","array","timeComplexityLabel","spaceComplexityLabel","componentDidMount","i","push","randomIntFromInterval","mergeSort","animations","length","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","count","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","height","j","quickSort","heapSort","bubbleSort","render","sortingSpeed","map","idx","width","min","max","Math","floor","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js'\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js'\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js'\nimport './SortingVisualizer.css';\n\n\n\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 250;\n\n// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS = 70;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#43A6C6';\n\n// This is thes color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst THIRD_COLOR = \"green\"\n\nconst MID_COLOR = \"yellow\"\n\nconst AFTER_SORTING_COLOR = \"#43A6C6\"\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize the array\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      // sortingSpeed: 500,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS,\n      arraySize: 70,\n      timeComplexityLabel: 'Time Complexity\\n\\nBest Case:\\n\\nAverage Case:\\n\\nWorst Case:',\n      spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case:',\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // Reset the array put all the new values\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({ array });\n  }\n\n\n  handleArraySizeChange = (event) => {\n    const newSize = parseInt(event.target.value, 10);\n    NUMBER_OF_ARRAY_BARS = newSize;\n    this.setState({ arraySize: newSize }, this.resetArray);\n  }\n\n  handleSortingSpeedChange = (event) => {\n    const newSpeed = 501 - parseInt(event.target.value, 10);\n    ANIMATION_SPEED_MS = newSpeed;\n    this.setState({ ANIMATION_SPEED_MS: newSpeed });\n  }\n\n\n  reloadPage = () => {\n    window.location.reload(); // This reloads the page\n  };\n\n\n\n  mergeSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\n\\nAverage Case: O(nlog(n))\\n\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n\n\n\n\n  quickSort() {\n\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[j].style;\n          barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n        }, animations.length * ANIMATION_SPEED_MS);\n\n      }\n    }, 0 * ANIMATION_SPEED_MS);\n\n  }\n\n  heapSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    // We leave it as an exercise to the viewer of this code to implement this method.\n\n    const animations = getHeapSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  bubbleSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n\n  render() {\n    const { array, arraySize, sortingSpeed, timeComplexityLabel, spaceComplexityLabel } = this.state;\n\n    return (\n\n\n      <div>\n\n        {/* <div>\n          <h1>Sorting Visualizer</h1>\n        </div> */}\n\n\n        <div id='toolbar'>\n          <div className=\"toolbar-left\">\n            <button id='generateArray' className='button-style' onClick={() => this.resetArray()}>Generate New Array</button>\n          </div>\n\n          <div id='slider'>\n            <div>\n              <label>Array Size:</label>\n              <input\n                type=\"range\"\n                min=\"15\"\n                max=\"70\"\n                value={arraySize}\n                onChange={this.handleArraySizeChange}\n              />\n              <span>{arraySize}</span>\n            </div>\n\n\n            <div>\n              <label>Sorting Speed:</label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"500\"\n                value={sortingSpeed}\n                onChange={this.handleSortingSpeedChange}\n              />\n              <span>{sortingSpeed}</span>\n            </div>\n          </div>\n\n\n          <div id='sorting-algorithms'>\n            <button id='mergesort' className='button-style' onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button id='quicksort' className='button-style' onClick={() => this.quickSort()}>Quick Sort</button>\n            <button id='heapsort' className='button-style' onClick={() => this.heapSort()}>Heap Sort</button>\n            <button id='bubblesort' className='button-style' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </div>\n\n          <div id='Reset-button'>\n            <button id=\"reload\" className='button-style' onClick={this.reloadPage}>\n              Reset\n            </button>\n          </div>\n\n          {/* <button id='reset' onClick={this.resetApplication}>Reset</button> */}\n\n\n        </div>\n\n\n        <div className=\"array-container\">\n\n\n\n          {/* <div className=\"complexity-column\">\n            <div className=\"time-complexity\"> */}\n          <h2>TIME COMPLEXITY</h2>\n          {/* <div className=\"complexity-cases\">\n                <div>\n                  <p class=\"Sub_Heading\">Worst case:</p>\n                  <p id=\"Time_Worst\"></p>\n                </div>\n                <div>\n                  <p class=\"Sub_Heading\">Average case:</p>\n                  <p id=\"Time_Average\"></p>\n                </div>\n                <div>\n                  <p class=\"Sub_Heading\">Best case:</p>\n                  <p id=\"Time_Best\"></p>\n                </div>\n              </div>\n            </div> */}\n\n\n\n          {/* <div className='time-complexity-label'>\n            {timeComplexityLabel}\n          </div> */}\n\n\n\n\n\n          <div className='inner-array-container'>\n            {array.map((value, idx) => (\n              <div className=\"array-bar\" key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  // flex: `0 0 calc(100% / ${arraySize})`,\n                  width: `${100 / (arraySize + 50)}%`,\n                  height: `${value}px`,\n                }}>\n\n              </div>\n            ))}\n          </div>\n          <div className='space-complexity-label'>\n            {spaceComplexityLabel}\n          </div>\n        </div>\n\n\n\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n// Selecting Random Value Using between min and max that is pass inside the reset function \nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n"]},"metadata":{},"sourceType":"module"}