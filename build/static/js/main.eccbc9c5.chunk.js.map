{"version":3,"sources":["sortingAlgorithms/MergeSort.js","sortingAlgorithms/QuickSort.js","sortingAlgorithms/HeapSort.js","sortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","push","k","i","j","doMerge","getQuickSortAnimations","quickSortHelper","pivotIdx","pivot","swap","allcolor","partition","arr","temp","getHeapSortAnimations","mainarray","n","MaxHeapify","HeapSortHelper","larger","left","right","getBubbleSortAnimations","isSort","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","handleArraySizeChange","event","newSize","parseInt","target","value","setState","arraySize","resetArray","handleSortingSpeedChange","newSpeed","reloadPage","window","location","reload","state","this","min","max","random","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","count","barOneStyle","style","barTwoStyle","setTimeout","backgroundColor","height","color","sortingSpeed","id","className","onClick","type","onChange","mergeSort","quickSort","heapSort","bubbleSort","map","idx","key","width","React","Component","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eccbc9c5.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n\n\n  //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  animations.push([middleIdx, middleIdx, 3]);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j, 0]);\n\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j, 1]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i], 2]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j], 2]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i], 2]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j, 0]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j, 1]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j], 2]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n\n\n\n\n\n\n\n\n\n\n// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   mergeSortHelper(array, 0, array.length - 1, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(\n//   mainArray,\n//   startIdx,\n//   endIdx,\n//   animations,\n// ) {\n//   if (startIdx === endIdx) return;\n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   animations.push([middleIdx, middleIdx, 3]);\n//   mergeSortHelper(mainArray, startIdx, middleIdx, animations);\n//   mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\n// }\n\n// function doMerge(\n//   mainArray,\n//   startIdx,\n//   middleIdx,\n//   endIdx,\n//   animations,\n// ) {\n\n//   const auxiliaryArray = [];\n//   // let k = 0;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n\n//     animations.push([i, j, 0]);\n\n//     if (mainArray[i] <= mainArray[j]) {\n\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[i++]]);\n//       // auxiliaryArray[k++] = mainArray[i++];\n//     } else {\n//       // animations.push([i, j, 0]);\n//       auxiliaryArray.push([mainArray[j++]]);\n//       // auxiliaryArray[k++] = mainArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[i++]]);\n//     // auxiliaryArray[k++] = mainArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([i, j, 0]);\n//     auxiliaryArray.push([mainArray[j++]]);\n//     // auxiliaryArray[k++] = mainArray[j++];\n//   }\n\n//   for (var t = 0; t < auxiliaryArray.length; t++) {\n//     animations.push([startIdx, auxiliaryArray[t], 2]);\n//     mainArray[startIdx++] = auxiliaryArray[t];\n//   }\n// }","export function getQuickSortAnimations(array) {\n\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  animations,\n) {\n  if (startIdx >= endIdx) return;\n  const pivotIdx = partition(mainArray, startIdx, endIdx, animations);\n  quickSortHelper(mainArray, startIdx, pivotIdx - 1, animations);\n  quickSortHelper(mainArray, pivotIdx + 1, endIdx, animations);\n  // animations.push([pivotIdx, pivotIdx, 4]);\n}\n\n\nfunction partition(mainArray, startIdx, endIdx, animations) {\n  let i = startIdx + 1;\n  let pivot = mainArray[startIdx];\n\n  animations.push([startIdx, startIdx, 3]);\n\n  for (var j = startIdx + 1; j <= endIdx; j++) {\n\n    animations.push([j, j, 3]);\n\n\n    if (pivot > mainArray[j]) {\n\n      animations.push([j, j, 0]);\n      animations.push([i, i, 0]);\n\n      animations.push([i, mainArray[j], 2]);\n      animations.push([j, mainArray[i], 2]);\n\n      swap(mainArray, i, j);\n\n      animations.push([i, j, 4]);\n\n      i++;\n    }\n\n    animations.push([j, j, 0]);\n    animations.push([j, j, 4]);\n  }\n\n  animations.push([i - 1, startIdx, 0]);\n  animations.push([i - 1, mainArray[startIdx], 2]);\n  animations.push([startIdx, mainArray[i - 1], 2]);\n  animations.push([startIdx, i - 1, 4]);\n\n  swap(mainArray, startIdx, i - 1);\n\n  for (var allcolor = startIdx; allcolor <= i; allcolor++) {\n    if (i >= mainArray.length) continue;\n    animations.push([allcolor, allcolor, 1]);\n  }\n\n  return i - 1;\n}\n\n\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n","export function getHeapSortAnimations(array) {\n\n    // //Setting Time complexities\n    // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n    // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n    // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n    // //Setting Space complexity\n    // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n    const animations = [];\n    if (array.length <= 1) return array;\n    HeapSortHelper(array, array.length, animations);\n    return animations;\n}\n\nfunction HeapSortHelper(mainarray, n, animations) {\n\n    //  1) max_heapify the array \n\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        MaxHeapify(mainarray, n, i, animations);\n    }\n\n    for (let i = n - 1; i >= 0; i--) {\n\n        // animations.push([0, i, 0]);\n        animations.push([0, mainarray[i], 2]);\n        animations.push([i, mainarray[0], 2]);\n        animations.push([0, i, 4]);\n        swap(mainarray, 0, i);\n        animations.push([i, i, 3]);\n        MaxHeapify(mainarray, i, 0, animations);\n        animations.push([i, i, 1]);\n    }\n}\n\nfunction MaxHeapify(mainArray, n, i, animations) {\n    let larger = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n\n    if (left < n && mainArray[larger] < mainArray[left]) {\n        animations.push([larger, left, 0]);\n        larger = left;\n    }\n\n    if (right < n && mainArray[larger] < mainArray[right]) {\n        if (larger !== i) {\n            animations.push([larger, larger, 4]);\n        }\n        animations.push([i, right, 0]);\n        // animations.push([larger, right, 4]);\n        larger = right;\n    }\n\n    if (larger !== i) {\n\n        animations.push([larger, mainArray[i], 2]);\n        animations.push([i, mainArray[larger], 2]);\n        animations.push([larger, i, 4]);\n        swap(mainArray, larger, i);\n        MaxHeapify(mainArray, n, larger, animations);\n\n    }\n\n    // animations.push([larger, i, 3]);\n}\n\nfunction swap(arr, i, j) {\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\n\n\n","export function getBubbleSortAnimations(array) {\n\n\n  // //Setting Time complexities\n  // document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n  // document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n  // document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\n\n  // //Setting Space complexity\n  // document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\n\n  const animations = [];\n  if (array.length <= 1) return array;\n  // const auxiliaryArray = array.slice();\n  quickSortHelper(array, animations);\n  return animations;\n}\n\nfunction quickSortHelper(\n  mainArray,\n  animations,\n) {\n\n  for (let i = 1; i < mainArray.length; i++) {\n    let isSort = true;\n    for (let j = 0; j < mainArray.length - i; j++) {\n      animations.push([j, j + 1, 0]);\n      animations.push([j, j + 1, 1]);\n\n      if (mainArray[j] > mainArray[j + 1]) {\n        animations.push([j, mainArray[j + 1], 2]);\n        animations.push([j + 1, mainArray[j], 2]);\n        swap(mainArray, j, j + 1);\n        isSort = false;\n      }\n    }\n\n    animations.push([mainArray.length - i, mainArray.length - i, 3]);\n\n\n    if (isSort) break;\n  }\n}\n\nfunction swap(arr, i, j) {\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n\n\n","import React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/MergeSort.js'\nimport { getQuickSortAnimations } from '../sortingAlgorithms/QuickSort.js'\nimport { getHeapSortAnimations } from '../sortingAlgorithms/HeapSort.js'\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/BubbleSort.js'\nimport './SortingVisualizer.css';\n\n\n\n\n// Change this value for the speed of the animations.\nvar ANIMATION_SPEED_MS = 250;\n\n// Change this value for the number of bars (value) in the array.\n// const NUMBER_OF_ARRAY_BARS = 310;\nvar NUMBER_OF_ARRAY_BARS = 70;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = '#43A6C6';\n\n// This is thes color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst THIRD_COLOR = \"green\"\n\nconst MID_COLOR = \"yellow\"\n\nconst AFTER_SORTING_COLOR = \"#43A6C6\"\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Initialize the array\n    this.state = {\n      array: [],\n      NUMBER_OF_ARRAY_BARS: NUMBER_OF_ARRAY_BARS,\n      // sortingSpeed: 500,\n      ANIMATION_SPEED_MS: ANIMATION_SPEED_MS,\n      arraySize: 70,\n      // timeComplexityLabel: 'Time Complexity\\n\\nBest Case:\\n\\nAverage Case:\\n\\nWorst Case:',\n      // spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case:',\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // Reset the array put all the new values\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(randomIntFromInterval(5, 730));\n      array.push(randomIntFromInterval(5, 550));\n    }\n    this.setState({ array });\n  }\n\n\n  handleArraySizeChange = (event) => {\n    const newSize = parseInt(event.target.value, 10);\n    NUMBER_OF_ARRAY_BARS = newSize;\n    this.setState({ arraySize: newSize }, this.resetArray);\n  }\n\n  handleSortingSpeedChange = (event) => {\n    const newSpeed = 501 - parseInt(event.target.value, 10);\n    ANIMATION_SPEED_MS = newSpeed;\n    this.setState({ ANIMATION_SPEED_MS: newSpeed });\n  }\n\n\n  reloadPage = () => {\n    window.location.reload(); // This reloads the page\n  };\n\n\n\n  mergeSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\n\\nAverage Case: O(nlog(n))\\n\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    // We will call getMergeSortAnimations and will sort the array and push back their i and j value \n    // how they are working in background \n    const animations = getMergeSortAnimations(this.state.array);\n    // now we have all the value of i and j how they sorted accordingly\n\n    // animation contain sequence of mergeSort so we will iterate them\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n\n\n\n\n  quickSort() {\n\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getQuickSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  heapSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n    // We leave it as an exercise to the viewer of this code to implement this method.\n\n    const animations = getHeapSortAnimations(this.state.array);\n\n    // animations.push([0, 0, 4]);\n\n    for (let i = 0; i < animations.length; i++) {\n\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 0) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = SECONDARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = THIRD_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = MID_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      else if (count === 4) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n\n  }\n\n  bubbleSort() {\n\n    // this.setState({\n    //   timeComplexityLabel: 'Time Complexity\\n\\nBest Case: O(nlog(n))\\nAverage Case: O(nlog(n))\\nWorst Case: O(nlog(n))',\n    //   spaceComplexityLabel: 'Space Complexity\\n\\nWorst Case: O(n)',\n    // });\n\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const [barOneIdx, barTwoIdx, count] = animations[i];\n\n      if (count === 3) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = THIRD_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n\n      } else if (count === 0 || count === 1) {\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = count === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else if (count === 2) {\n        setTimeout(() => {\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${barTwoIdx}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n\n    const arrayBars = document.getElementsByClassName('array-bar');\n\n    setTimeout(() => {\n      for (let j = 0; j < arrayBars.length; j++) {\n        const barOneStyle = arrayBars[j].style;\n        barOneStyle.backgroundColor = AFTER_SORTING_COLOR;\n      }\n    }, animations.length * ANIMATION_SPEED_MS);\n  }\n\n\n  render() {\n    const { array, arraySize, sortingSpeed } = this.state;\n\n    return (\n\n\n      <div>\n\n        {/* <div>\n          <h1>Sorting Visualizer</h1>\n        </div> */}\n\n\n        <div id='toolbar'>\n          <div className=\"toolbar-left\">\n            <button id='generateArray' className='button-style' onClick={() => this.resetArray()}>Generate New Array</button>\n          </div>\n\n          <div id='slider'>\n            <div>\n              <label>Array Size:</label>\n              <input\n                type=\"range\"\n                min=\"15\"\n                max=\"70\"\n                value={arraySize}\n                onChange={this.handleArraySizeChange}\n              />\n              <span>{arraySize}</span>\n            </div>\n\n\n            <div>\n              <label>Sorting Speed:</label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"500\"\n                value={sortingSpeed}\n                onChange={this.handleSortingSpeedChange}\n              />\n              <span>{sortingSpeed}</span>\n            </div>\n          </div>\n\n\n          <div id='sorting-algorithms'>\n            <button id='mergesort' className='button-style' onClick={() => this.mergeSort()}>Merge Sort</button>\n            <button id='quicksort' className='button-style' onClick={() => this.quickSort()}>Quick Sort</button>\n            <button id='heapsort' className='button-style' onClick={() => this.heapSort()}>Heap Sort</button>\n            <button id='bubblesort' className='button-style' onClick={() => this.bubbleSort()}>Bubble Sort</button>\n          </div>\n\n          <div id='Reset-button'>\n            <button id=\"reload\" className='button-style' onClick={this.reloadPage}>\n              Reset\n            </button>\n          </div>\n\n          {/* <button id='reset' onClick={this.resetApplication}>Reset</button> */}\n\n\n        </div>\n\n\n        <div className=\"array-container\">\n\n\n\n          { /* <div className=\"complexity-column\">\n            <div className=\"time-complexity\">\n              <h2>TIME COMPLEXITY</h2>\n\n              <div className=\"complexity-cases\">\n\n                <div>\n                  <p class=\"Sub_Heading\">Worst case:</p>\n                  <p id=\"Time_Worst\"></p>\n                </div>\n\n                <div>\n                  <p class=\"Sub_Heading\">Average case:</p>\n                  <p id=\"Time_Average\"></p>\n                </div>\n\n                <div>\n                  <p class=\"Sub_Heading\">Best case:</p>\n                  <p id=\"Time_Best\"></p>\n                </div>\n\n              </div>\n\n            </div>\n      </div> */ }\n\n\n\n\n\n          <div className='inner-array-container'>\n            {array.map((value, idx) => (\n              <div className=\"array-bar\" key={idx}\n                style={{\n                  backgroundColor: PRIMARY_COLOR,\n                  // flex: `0 0 calc(100% / ${arraySize})`,\n                  width: `${100 / (arraySize + 50)}%`,\n                  height: `${value}px`,\n                }}>\n\n              </div>\n            ))}\n          </div>\n\n\n\n          { /* <div className=\"space-complexity\">\n            <h2>SPACE COMPLEXITY</h2>\n            <div className=\"complexity-cases\">\n              <div>\n                <p class=\"Sub_Heading\">Worst case:</p>\n                <p id=\"Space_Worst\"></p>\n              </div>\n            </div>\n          </div> */ }\n\n\n        </div>\n\n\n\n      </div >\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\n// Selecting Random Value Using between min and max that is pass inside the reset function \nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}